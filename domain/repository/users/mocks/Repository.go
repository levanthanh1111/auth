// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	base "github.com/tpp/msf/shared/base"
	context "github.com/tpp/msf/shared/context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/tpp/msf/model"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

func (_m *Repository) UpdateName(ctx context.Context, name string, userID int64) error {
	//TODO implement me
	panic("implement me")
}

func (_m *Repository) UpdateActive(ctx context.Context, userID int64, active bool) error {
	//TODO implement me
	panic("implement me")
}

func (_m *Repository) UpdatePassWord(ctx context.Context, userID int64, passWord string) error {
	//TODO implement me
	panic("implement me")
}

// Create provides a mock function with given fields: ctx, user
func (_m *Repository) Create(ctx context.Context, user *model.User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, userID
func (_m *Repository) Get(ctx context.Context, userID uint64) (*model.User, error) {
	ret := _m.Called(ctx, userID)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *model.User); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrg provides a mock function with given fields: ctx, orgID
func (_m *Repository) GetOrg(ctx context.Context, orgID uint64) (*model.Org, error) {
	ret := _m.Called(ctx, orgID)

	var r0 *model.Org
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *model.Org); ok {
		r0 = rf(ctx, orgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Org)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, orgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRole provides a mock function with given fields: ctx, roleID
func (_m *Repository) GetRole(ctx context.Context, roleID uint64) (*model.Role, error) {
	ret := _m.Called(ctx, roleID)

	var r0 *model.Role
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *model.Role); ok {
		r0 = rf(ctx, roleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Role)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, roleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, limit, offset, filters
func (_m *Repository) List(ctx context.Context, limit int, offset int, filters []*base.Filter) ([]*model.User, int64, error) {
	ret := _m.Called(ctx, limit, offset, filters)

	var r0 []*model.User
	if rf, ok := ret.Get(0).(func(context.Context, int, int, []*base.Filter) []*model.User); ok {
		r0 = rf(ctx, limit, offset, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.User)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(context.Context, int, int, []*base.Filter) int64); ok {
		r1 = rf(ctx, limit, offset, filters)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int, int, []*base.Filter) error); ok {
		r2 = rf(ctx, limit, offset, filters)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateUserRole provides a mock function with given fields: ctx, userID, roleID
func (_m *Repository) UpdateUserRole(ctx context.Context, userID uint64, roleID uint64) error {
	ret := _m.Called(ctx, userID, roleID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64) error); ok {
		r0 = rf(ctx, userID, roleID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
