// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	base "github.com/tpp/msf/shared/base"
	context "github.com/tpp/msf/shared/context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/tpp/msf/model"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, contractID
func (_m *Repository) Get(ctx context.Context, contractID uint64) (*model.Contract, error) {
	ret := _m.Called(ctx, contractID)

	var r0 *model.Contract
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *model.Contract); ok {
		r0 = rf(ctx, contractID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Contract)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, contractID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, limit, offset, filters
func (_m *Repository) List(ctx context.Context, limit int, offset int, filters []*base.Filter) ([]*model.Contract, int64, error) {
	ret := _m.Called(ctx, limit, offset, filters)

	var r0 []*model.Contract
	if rf, ok := ret.Get(0).(func(context.Context, int, int, []*base.Filter) []*model.Contract); ok {
		r0 = rf(ctx, limit, offset, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Contract)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(context.Context, int, int, []*base.Filter) int64); ok {
		r1 = rf(ctx, limit, offset, filters)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int, int, []*base.Filter) error); ok {
		r2 = rf(ctx, limit, offset, filters)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
